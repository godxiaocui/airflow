from airflow import DAG
from airflow.operators.python import PythonOperator
from airflow.models import DagRun
from datetime import datetime, timedelta
from airflow.utils.email import send_email
import pandas as pd

def send_daily_report(**context):
    # 1. 获取当天所有DAG运行（正确方法）
    today = datetime.utcnow().date()
    all_dag_runs = DagRun.find()  # 获取全部记录
    
    # 2. 手动过滤当天数据
    dag_runs = [
        dr for dr in all_dag_runs 
        if dr.execution_date.date() == today
    ]
    
    # 3. 用Pandas整理数据
    data = []
    for dag_run in dag_runs:
        for task in dag_run.get_task_instances():
            data.append({
                "DAG": task.dag_id,
                "Task": task.task_id,
                "Status": task.state,
                "Runtime (s)": round(task.duration, 2) if task.duration else None,
                "Exec Time": task.execution_date.strftime("%H:%M")
            })
    
    df = pd.DataFrame(data)
    
    # 4. 生成邮件（空数据时友好提示）
    if df.empty:
        email_content = f"<p>⚠️ 今天 {today} 没有任务运行</p>"
    else:
        email_content = f"""
        <h3>📊 Airflow Daily Report - {today}</h3>
        <p>Total tasks: <b>{len(df)}</b></p>
        {df.to_html(index=False, na_rep='N/A')}
        <style>
            table {{ border-collapse: collapse; width: 100%; }}
            th, td {{ padding: 8px; text-align: left; border-bottom: 1px solid #ddd; }}
            tr:hover {{ background-color: #f5f5f5; }}
        </style>
        """
    
    # 5. 发送邮件
    send_email(
        to="your-email@example.com",  # 替换为您的邮箱
        subject=f"Airflow Report - {today}",
        html_content=email_content
    )

# 定义DAG
with DAG(
    dag_id="correct_daily_report",
    schedule_interval="@daily",
    start_date=datetime(2023, 1, 1),
    catchup=False,
    default_args={"email_on_failure": False}
) as dag:
    
    PythonOperator(
        task_id="send_report",
        python_callable=send_daily_report
    )
